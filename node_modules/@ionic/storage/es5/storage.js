"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require('@angular/core');
var localforage_1 = require('localforage');
var localforage_cordovasqlitedriver_1 = require('localforage-cordovasqlitedriver');
/**
 * Storage is an easy way to store key/value pairs and other complicated
 * data in a way that uses a variety of storage engines underneath. Currently,
 * Storage uses localforage underneath to abstract away the various storage
 * engines while still providing a simple API.
 *
 * When running natively, Storage will prioritize using SQLite, as it's one of
 * the most stable and widely used file-based databases, and avoids some of the
 * pitfalls of things like localstorage that the OS can decide to clear out in
 * low disk-space situations.
 *
 * When running in the web or as a Progressive Web App, Storage will attempt to use
 * IndexedDB, WebSQL, and localstorage, in that order.
 */
var Storage = (function () {
    function Storage() {
        // TODO: Remove this once we figure out our proper build
        this._db = localforage_1.default;
        this._db.config({
            name: '_ionicstorage',
            storeName: '_ionickv'
        });
        this._db.setDriver([
            localforage_cordovasqlitedriver_1.default._driver,
            this._db.INDEXEDDB,
            this._db.WEBSQL,
            this._db.LOCALSTORAGE
        ]);
    }
    /**
     * Get the value assocated with the given key.
     * @return Promise that resolves with the value
     */
    Storage.prototype.get = function (key) {
        return this._db.getItem(key);
    };
    /**
     * Set the value for the given key.
     * @param key the key to identify this value
     * @param value the value for this key
     * @return Promise that resolves when the value is set
     */
    Storage.prototype.set = function (key, value) {
        return this._db.setItem(key, value);
    };
    /**
     * Remove any value associated with this key.
     * @param key the key to identify this value
     * @return Promise that resolves when the value is removed
     */
    Storage.prototype.remove = function (key) {
        return this._db.removeItem(key);
    };
    /**
     * Clear the entire key value store. WARNING: HOT!
     * @return Promise that resolves when the kv store is cleared
     */
    Storage.prototype.clear = function () {
        return this._db.clear();
    };
    /**
     * @return the number of keys stored.
     */
    Storage.prototype.length = function () {
        return this._db.length();
    };
    /**
     * @return the keys in the store.
     */
    Storage.prototype.keys = function () {
        return this._db.keys();
    };
    /**
     * Iterate through each key,value pair.
     * @param iteratorCallback a callback of the form (value, key, iterationNumber)
     */
    Storage.prototype.forEach = function (iteratorCallback) {
        return this._db.iterate(iteratorCallback);
    };
    Storage = __decorate([
        core_1.Injectable()
    ], Storage);
    return Storage;
}());
exports.Storage = Storage;
